#########
# Physics
#########
b0_type: komega
gravity: 1
body_force: 0.0 -dpdx
###########
# Constants
###########
# Physical Constants
rho: 1.0
mu: 1e-4
# Set linf = Dh where Dh = 2H and H is the channel width. uinf = ubar
uinf: 1.0
linf: 1
# Grid Constants
yplus1: 1
# Turbulence Model constants
lambda_k: 0.1
kmax2ustarRatio: 3.5
beta1: 0.075
lambda_y1: 1
c_mu: 0.09
# Derived constants
Dh: linf
nu: mu/rho
Re: uinf*Dh/nu
# Initial estimate of mean turbulent kinetic energy and specific dissipation rate based on Re
l_turb: 0.07*Dh/(c_mu^0.75)
I: 0.16*Re^(-1/8)
k_est: 3/2*(uinf*I)^2 
omg_est: sqrt(k_est)/c_mu/l_turb
kinf: k_est
omginf: omg_est
# friction factor from Serghides's (1984) explicit formula for Colebrook's Eq.
S1: -2*log10(12/Re)
S2: -2*log10(2.51*S1/Re)
S3: -2*log10(2.51*S2/Re)
fr: (S1-(S1 -S2)^2/(S3-2*S2+S1))^(-2)
dpdx: -1/2*rho*uinf^2*fr/Dh 
tau: -dpdx*Dh/4
ustar: sqrt(tau/rho)
ystar: nu/ustar
# Finding kmax and epsilon_k
kmax: kmax2ustarRatio*ustar^2
epslnk: lambda_k*kmax
# Distance of the first grid point from the wall (Used with Menter's BC)
y1: lambda_y1*yplus1*ystar
# ksplus and ks used with Wilcox's rough wall BC
ksplus: 5
ks: ksplus*nu/ustar
###########################
# Mesh and mesh adaptation 
###########################
b0_mesh: rstrt1_b0
#adapt: 1
# Norm to be used for mesh adaptation (energy_norm or scale_independent). If commented, just maintains mesh quality for deforming meshes
#error_estimator: energy_norm
# target error level when using mesh adaptation:
#error_target: 1.0e-4
#growth factor: 100.0
################
# Time stepping 
###############
dtinv: 0
# number of time steps should be greater than 1 to get mesh adaptation working
ntstep: 1
################################
# Initial & Boundary conditions
################################
# Initial/Boundary Condition Function:
# values for ktld and omgtld found from MATLAB as trapz(y,ktldc)/H and trapz(y,omgtldc)/H
ibc: symbolic
ibc0: 0.0
ibc1: uinf
ibc2: kinf
ibc3: log(omginf)
ibc4: 0.0
# wall
b0_s1_hp_type: plain
b0_s1_hp_typelist: 0 0 0 0 1
b0_s1_ibc: symbolic
b0_s1_ibc0: 0.0
b0_s1_ibc1: 0.0
b0_s1_ibc2: 0.0
# Menter's BC
b0_s1_ibc3: log(60*nu/(beta1*y1^2))
# Wilcox's rough wall B.C.
#b0_s1_ibc3: log(40000*nu/ks^2)
b0_s1_ibc4: 0.0
# periodic boundary
b0_s2_type: prdc
b0_s2_dir: 1
#b0_s2_hp_type: outflow
#b0_s2_report: 1
# fixing pressure at two points on the top corners of the domain
b0_v1_hp_type: plain
b0_v1_hp_typelist: 1 1 1 1 0
b0_v2_hp_type: plain
b0_v2_hp_typelist: 1 1 1 1 0
###############
# Continuation
###############
restart: 1
#restart_type: 1
reload_type: 1
###############
# Order of FEM
###############
# log 2 of polynomial order (0,1,2) (2 = fourth order polynomials): 
log2p: 0
#########################################
# PETSC solver, Under Relaxation and SUPG
#########################################
ncycle: 100
# itertive tolerance for Newton
relative_tolerance: 1.0e-5
absolute_tolerance: 1.0e-10
# choose petsc LU inversion solver: (mumps or superlu_dist) 
petsc: -ksp_type preonly -pc_type lu -pc_factor_mat_solver_package mumps
under_relaxation: 1e-1
# SUPG
#b0_dissipation: 0.0
###########
# Debugging
###########
#debug_output: 1
#jac_debug: 1
#rsdl_debug: 1
#########
# Output
#########
# Name of file for output: 
logfile: out
#####################################
# Other things I usually don't change
#####################################
# Explicit solver stuff
nstage: 1
alpha: 1.0
beta: 1.0

















