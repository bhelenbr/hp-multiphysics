# See HowTo for basis unix stuff

# Packages to be installed
1 blitz array library (necessary)
2 muParser math parsing library (necessary)
3 libbinio platform independent binary input/output (necessary)
5 pth for user space threading (multiple blocks running under 1 process) (necessary)
6 boost for system space threading (skip!)
8 cfortran for c calls to fortran (necessary)
9 petsc for parallel matrix inversion and iteration (necessary)
10 MeshAdapt for tetrahedral mesh generation (3D Only)
11 Gmsh for tetrahedrals (3D Only)
12 valgrind for debugging (skip!)
13 probably need to install cmake (gui installer for OS X & Windows) (3D Only)

########################
#### FOR OS X       ####
#### USING HOMEBREW ####
########################
# To install command line tools
xcode-select --install

/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew install pth
brew install muparser
brew install netcdf
brew install libbinio
brew install mpich
brew install cmake
brew install python2 (needed for blitz install)

% This doesn't work anymore
# brew install --build-from-source --HEAD blitz
% brew tap homebrew/science
% brew install petsc
% brew install slepc

# These are not necessary but I put it here
# as a reminder of nice things to install
brew install pdftohtml
brew install graphviz
brew install doxygen

#need to install numpy scipy matplotlib for python plotting
#brew install python (install python3)
#pip3 install numpy scipy matplotlib

To update installed packages
brew update
brew outdated
brew upgrade
brew cleanup (wait until you are sure everything works)

# If you want to start over: uninstall homebrew:
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"

############################################################
# THE FOLLOWING PACKAGES ARE UNNECESSARY IF USING HOMEBREW #
# SKIP TO THE PART ABOUT BUILDING MY CODE                  #
############################################################

###################################################################
#### GET BLITZ 
###################################################################
cd ~/Packages
git clone https://github.com/blitzpp/blitz.git blitz
cd blitz
autoreconf -fiv
./configure --prefix=${HOME}/Packages
make lib
make install

###################################################################
#### GET OPENMPI IF NOT INSTALLED (ON OS X)
#### (CAN USE PACKAGE MANGER FOR UBUNTU (SYNAPTIC?) OR YUM) 
###################################################################
http://www.open-mpi.org/
Download button, current version openmpi-1.4.4.tar.gz
Put in Packages directory
tar zxvf openmpi-1.4.4.tar.gz
./configure --prefix=${HOME}/Packages
make all install

###################################################################
#### MATH PARSING LIBRARY 
#### AVAILABLE THROUGH PACKAGE MANGER IN UBUNTU (SYNAPTIC?) OR YUM
###################################################################
Download muParser v2_2_2 (most recent) at http://muparser.sourceforge.net/

Replace XX with version number in following.
move it to the Packages folder
while in the Downloads folder,
	[mv muparser_vXX.tar ../Packages]
go to the Packages folder
	[cd ../Packages]
extract, configure 
	[tar zxvf muparser_vXX.tar]
	[cd muparser]
	[./configure --prefix=${HOME}/Packages]
	[make]
	[make install]

# or FROM repository
svn checkout http://muparser.googlecode.com/svn/trunk/ muparser-read-only

###################################################################
#### PLATFORM INDEPENDENT BINARY I/O LIBRARY
#### AVAILABLE THROUGH PACKAGE MANGER IN UBUNTU (SYNAPTIC?)
###################################################################

Download libbinio v1.4 (most recent) at http://sourceforge.net/projects/libbinio
move libbinio-1.4.tar.bz2 to Packages
unzip, configure
	[tar --use-compress-program bzip2 -xvf libbinio-1.4.tar.bz2]
	[cd libbinio-1.4]
	[./configure --prefix=${HOME}/Packages]
	For intel compilers had to disable shared library (skip this line)
	[./configure --prefix=${HOME}/Packages --enable-shared=no --enable-fast-install=no] 
	[make]
	[make install]
	[cd ..]

# or from repository
cvs -d:pserver:anonymous@libbinio.cvs.sourceforge.net:/cvsroot/libbinio login 
cvs -z3 -d:pserver:anonymous@libbinio.cvs.sourceforge.net:/cvsroot/libbinio co -P libbinio
autoreconf -fiv
(fails on documentation?)

###################################################################
######## USER SPACE THREADS LIBRARY #############
###################################################################

Download Pth (2.0.7 is most recent) at http://www.gnu.org/software/pth/
move pth-2.0.7.tar.gz to Packages
	[tar zxvf pth-2.0.7.tar.gz]
	[cd pth-2.0.7]
	[./configure --prefix=${HOME}/Packages --enable-shared=no --enable-optimize]
	[./configure --prefix=${HOME}/Packages --enable-optimize]
	[make]
	[make install]
	[cd ..]

# curl -OL ftp://ftp.gnu.org/gnu/pth/pth-2.0.7.tar.gz

###################################################################
####### SYSTEM SPACE THREADS LIBRARY #############
###################################################################
# SKIP THIS
Download Boost at
	the
unpack in packages folder (see index.html file for instructions)
	[tar zxvf boost_1_48_0.tar.gz]
	[cd boost_1_48_0]
	[./bootstrap.sh --with-libraries=thread --prefix=${HOME}/Packages]
	[./b2 install]
	[cd ..]

###################################################################
### HEADER FOR C to CALL FORTRAN ROUTINES ###########
###################################################################
cd ${HOME}/Packages/include/
curl -OL http://www-zeus.desy.de/~burow/cfortran/cfortran.h 

###################################################################
#### (VALGRIND ONLY FOR DEBUGGING  SKIP THIS) ####
###################################################################
##############################################################
# auto tools for OS X ########################################
# needed to build from svn repository ########################
##############################################################
curl -OL http://ftpmirror.gnu.org/autoconf/autoconf-latest.tar.gz
tar xzf autoconf-latest.tar.gz
cd autoconf-
./configure --prefix=${HOME}/Packages
make
make install

cd $build
curl -OL http://ftpmirror.gnu.org/automake/automake-1.15.tar.gz
tar xzf automake-1.15.tar.gz
cd automake-1.15
./configure --prefix=${HOME}/Packages
make install

cd $build
curl -OL http://ftpmirror.gnu.org/libtool/libtool-2.4.tar.gz
tar xzf libtool-2.4.tar.gz
cd libtool-2.4
./configure --prefix=${HOME}/Packages
make
make install
###############################################
# To install command line tools
xcode-select --install

# download valgrind from web
xcode-select --install  (To install Xcode command line tools)
tar --use-compress-program bzip2 valgrindXXX.tar.bz2
./configure --prefix=/share/apps (for cluster)
./configure --prefix=${HOME}/Packages (for ubuntu & for OS X with homebrew installed openmpi)
make
make install

or from git (for newest which is sometimes necessary)
git clone git://sourceware.org/git/valgrind.git
To build the cloned code, follow the instructions in the README file that the clone should give you. Alternatively, the following should work:

cd valgrind
./autogen.sh
./configure --prefix=..
make
make install

###################################################################
######## FOR PETSC ############
###################################################################
cd ~/Packages
git clone -b maint https://gitlab.com/petsc/petsc.git petsc

# OR to update
rm -rf arch-darwin-c-debug #remove build files
git pull
git clean -f -d -x         # remove all files that are not in the git repo

# To know what packages are available: ./config/configure.py --help
# on OS X
./config/configure.py --prefix=${HOME}/Packages --with-x=0 --download-parmetis=1 --download-metis=1 --download-mumps=1 --download-scalapack=1

# on orion
./configure --prefix=${HOME}/Packages --with-x=0 --download-parmetis=1 --download-metis=1 --download-mumps=1 --download-scalapack=1 --download-hdf5=1 --download-netcdf=1 --with-mpi-dir=/usr/mpi/gcc/mvapich2/ --with-valgrind-dir=/share/apps --download-sowing=1 --download-zlib=1

# On stampede
./config/configure.py --prefix=${HOME}/Packages --download-superlu_dist=1 --with-x=0 --download-parmetis=1 --download-metis=1 --with-valgrind-dir=/opt/apps


# READ & COPY OUTPUT TO KNOW WHAT TO DO NEXT. IT SHOULD BE SOMETHING LIKE THIS:
make PETSC_DIR=/Users/bhelenbr/Packages/petsc-3.1-p3 PETSC_ARCH=darwin10.3.1-c-debug ala
make PETSC_DIR=/Users/bhelenbr/Packages/petsc-3.1-p3 PETSC_ARCH=darwin10.3.1-c-debug installPETSC_DIR=/Users/helenbrk/Packages;
make PETSC_DIR=/Users/bhelenbr/Packages test

###################################################################
##### MeshAdapt for Tetrahedral Meshing Stuff      ################
###################################################################
#### FOR TETRAHEDRAL CODE, DO THIS HERE ####
#### NOT NECESSARY FOR 2D CODE ###
#### (FOR TETS ONLY) FOR MADLIB ####
(NEED PASSWORD FROM BRIAN)
	[svn co https://svn.cenaero.be/MAdLib/trunk MAdLib] or [svn update]
	[cd MAdLib]
	Read README
	[mkdir build; cd build]
	export CMAKE_PREFIX_PATH=/share/apps (on orion)
	export CMAKE_PREFIX_PATH=${HOME}/Packages (on OS X)
       export CMAKE_INSTALL_PREFIX=${HOME}/Packages or /share/apps


	[cmake ..]

	[ccmake ..] (on linux or OS X)
	Hit t to toggle expert mode.
	Change MADLIB_INSTALL_EXTENDED_API TO ON
	Change CMAKE_INSTALL_PREFIX to ${HOME}/Packages or /share/apps
	## Change BUILD DOXYGEN if you want documentation and have doxygen installed
	Also, looks for a PLATFORM variable, the files are in cmake/platforms
	Can ignore this I think
	Hit "c" configure then Hit "g" generate

	[cmake ..]
	[make depend]
	[make -j 2]
	[make install]

	# Move the include_all/MAdLib folder and replace the one in include


###################################################################
NOW DOWNLOAD MY CODE
###################################################################
[cd]
git clone https://github.com/bhelenbr/hp-multiphysics.git
[mkdir bin] # (if not already there)
[cd Codes]
[mkdir include lib] # (if not already there)

#################################################################
# THIS IS OLD WAY USING MY SSH SERVER WHICH REQUIRES A PASSCODE #
# [cd]
# “ssh-keygen" (Hit return twice, i.e. use no passphrase)
# “cd ~/.ssh"
# “cat id_rsa.pub > ~/Desktop/id.txt"
# send id.txt file on desktop to Brian so he can give you access to repository
# [cd]

now get all of my stuff:
git clone ssh://git@balin.camp.clarkson.edu/~/GitRepo Codes
[mkdir bin] # (if not already there)
[cd Codes]
[mkdir include lib] # (if not already there)
#################################################################

###################################################################	
#### UNIX ####
# modify your ~/.bash_profile file in your home directory by 
# adding the location of the packages directory:
# On cluster:
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/share/apps/lib
export PACKAGES=/export/apps
# For Linux:
export PACKAGES=/${HOME}/Packages
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PACKAGES/lib

After making these changes 
type
". .bash_profile"
To load the new environment variables

# you may have to monkey with the makefiles to change
# blas & lapack libraries, as well as mpic++ location 
# and directory of mpi.h include.  
# This are in the individual directories.  
# For mpi it is mainly the tri_mesh and tri_hp directories
# for boas stuff it is the tri_basis makefile and maybe
# tri_hp as well.
# Sometimes superLU changes its version number which messes everything up
# you will have to change the number to match in the tri_hp makefile

# Other things is that getnewblock.cpp in tri_hp and 
# the makefile have to compile the same classes.
# if you have virtual functions undefined, check this


make -j 2 tri_hp (For 2 processor machine)
or to do everything including 3D stuff too
ma
###################################################################

###################################################################
#### OS X ####
###################################################################
cd ${HOME}/hp-multiphysics
cd utilities
xcodebuild -alltargets -configuration Release -arch arm64
cd ../quadtree
xcodebuild -alltargets -configuration Release -arch arm64
cd ../spline++
xcodebuild -alltargets  -configuration Release -arch arm64
cd ../input_map
xcodebuild -alltargets  -configuration Release -arch arm64
cd ../symbolic_function
xcodebuild -alltargets  -configuration Release -arch arm64
cd ../tri_mesh
xcodebuild -alltargets -configuration Release -arch arm64
cd ../tri_basis
xcodebuild -alltargets -configuration Release -arch arm64
cd ../tri_hp
xcodebuild -alltargets -configuration Release -arch arm64
cd ../tet_mesh
xcodebuild -alltargets -configuration Release -arch arm64
cd ../tet_basis
xcodebuild -alltargets -configuration Release -arch arm64
cd ../tet_hp
xcodebuild -alltargets -configuration Release -arch arm64

###################################################################
# TO CLEAN
cd ${HOME}/Codes
cd utilities
xcodebuild -alltargets -configuration Release clean
cd ../quadtree
xcodebuild -alltargets -configuration Release clean
cd ../spline++
xcodebuild -alltargets  -configuration Release clean
cd ../input_map
xcodebuild -alltargets  -configuration Release clean
cd ../symbolic_function
xcodebuild -alltargets  -configuration Release clean
cd ../tri_mesh
xcodebuild -alltargets -configuration Release clean
cd ../tri_basis
xcodebuild -alltargets -configuration Release clean
cd ../tri_hp
xcodebuild -alltargets -configuration Release clean
cd ../tet_mesh
xcodebuild -alltargets -configuration Release clean
cd ../tet_basis
xcodebuild -alltargets -configuration Release clean
cd ../tet_hp
xcodebuild -alltargets -configuration Release clean
###################################################################


#################################################
# IF DESIRED, NOT NECESSARY                     #
# TO MAKE MESH & INPUT FILE GRAPHICAL UTILITIES #
# Get from Brian				#
#################################################
cd 

tar zxvf util.tgz

# For showmesh,showgrid X11 application

cd ${HOME}/Codes/Cocoa/easymesh

./compile.command

# For input.app application (OS X only) 

cd ../inputwfind

xcodebuild -configuration Deployment

###################################################################
#### FOR GMSH (NOT NECESSARY) ####
###################################################################
Download at http://www.fltk.org/software.php
move to Packages
	[tar zxvf fltk-1.1.9-source.tgz]
	[rm fltk-1.1.9-source.tgz]
	[cd fltk-1.1.9]
	[./configure --prefix=${HOME}/Packages]
	[make]
	[make install]
	[cd zlib]
	[make]
	[make install]
	[cd ../..]
FOR GMSH
	[svn checkout https://geuz.org/svn/gmsh/trunk gmsh]
For read-only access, simply use login=gmsh, password=gmsh.
	[cd gmsh]
	[svn update]

For commits (me only, login=brianh password=hb4519)
In CMAKE:
	[CMAKE_INSTALL_PREFIX ${HOME}/Packages]
	[CMAKE_PREFIX_PATH ${HOME}/Packages]
	[FLTK_DIR ${HOME}/Packages/fltk-1.3x...]
	[ENABLE_GRAPHICS]

