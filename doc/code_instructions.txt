# See HowTo for basis unix stuff

# Packages to be installed
1 blitz array library (necessary)
2 muParser math parsing library (necessary)
3 libbinio platform independent binary input/output (necessary)
5 pth for user space threading (multiple blocks running under 1 process) (necessary)
6 boost for system space threading (skip!)
8 cfortran for c calls to fortran (necessary)
9 petsc for parallel matrix inversion and iteration (necessary)
10 MeshAdapt for tetrahedral mesh generation (3D Only)
11 Gmsh for tetrahedrals (3D Only)
12 valgrind for debugging (skip!)
13 probably need to install cmake (gui installer for OS X & Windows) (3D Only)

########################
#### FOR OS X       ####
#### USING HOMEBREW ####
########################
# To install command line tools
xcode-select --install

/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install muparser
brew install netcdf
#brew install libbinio
brew install mpich
#brew install open-mpi (open-mpi / mumps / petsc doesn't work)
brew install cmake
brew install pth
brew install blitz
#brew install python2 (not needed for blitz install anymore I think)

% This doesn't work anymore
# brew install --build-from-source --HEAD blitz
% brew tap homebrew/science
% brew install petsc
% brew install slepc

# These are not necessary but I put it here
# as a reminder of nice things to install
brew install pdftohtml
brew install graphviz
brew install doxygen
brew install latex2rtf
brew install latexdiff
brew install svn

#need to install numpy scipy matplotlib for python plotting
brew install python (install python3)
mkdir ~/.venv
python3 -m venv ~/.venv
source ~/.venv/bin/activate (add this to .zsh_profile)?
cat "source ~/.venv/bin/activate" >> ~/.zprofile
pip install numpy scipy matplotlib

To update installed packages
brew doctor 
brew update
brew outdated
brew upgrade
brew cleanup (wait until you are sure everything works)

# If you want to start over: uninstall homebrew:
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"

#################
ON NVIDIA CLUSTER
#################
module load cmake
module load openblas/dynamic
module load python3
export CXXMPI=mpic++

############################################################
# THE FOLLOWING PACKAGES ARE UNNECESSARY IF USING HOMEBREW #
# SKIP TO THE PART ABOUT BUILDING MY CODE                  #
############################################################

###################################################################
#### GET BLITZ 
###################################################################
cd ~/Packages
git clone https://github.com/blitzpp/blitz.git blitz
cd blitz
cmake .
ccmake .
# Change cmake_install_prefix to /Users/bhelenbr/Packages
# (c)configure then (g)enerate
make
make install

###################################################################
#### GET OPENMPI IF NOT INSTALLED (ON OS X)
#### (CAN USE PACKAGE MANGER FOR UBUNTU (SYNAPTIC?) OR YUM) 
###################################################################
http://www.open-mpi.org/
Download button, current version openmpi-1.4.4.tar.gz
Put in Packages directory
tar zxvf openmpi-1.4.4.tar.gz
./configure --prefix=${HOME}/Packages
make all install


###################################################################
#### MATH PARSING LIBRARY 
#### AVAILABLE THROUGH PACKAGE MANGER IN UBUNTU (SYNAPTIC?) OR YUM
###################################################################
Download muParser v2_2_2 (most recent) at http://muparser.sourceforge.net/
# or FROM repository
git clone https://github.com/beltoforion/muparser.git
cd muparser
cmake . -DCMAKE_INSTALL_PREFIX=${HOME}/Packages
make 
make install


###################################################################
######## PTH USER SPACE THREADS LIBRARY #############
###################################################################

Download Pth (2.0.7 is most recent) at http://www.gnu.org/software/pth/
Or
# curl -OL ftp://ftp.gnu.org/gnu/pth/pth-2.0.7.tar.gz
# curl -OL http://ftp.gnu.org/gnu/pth/pth-2.0.7.tar.gz
move pth-2.0.7.tar.gz to Packages
	[tar zxvf pth-2.0.7.tar.gz]
	[cd pth-2.0.7]
	[./configure --prefix=${HOME}/Packages --enable-shared=no --enable-optimize]
	[./configure --prefix=${HOME}/Packages --enable-optimize]
	[make]
	[make install]
	[cd ..]



###################################################################
#### (VALGRIND ONLY FOR DEBUGGING  SKIP THIS) ####
###################################################################
# To install command line tools
xcode-select --install

or from git (for newest which is sometimes necessary)
git clone git://sourceware.org/git/valgrind.git
To build the cloned code, follow the instructions in the README file that the clone should give you. Alternatively, the following should work:

cd valgrind
./autogen.sh
./configure --prefix=..
make
make install

###################################################################
######## FOR PETSC ############
###################################################################
cd ~/Packages
git clone -b release https://gitlab.com/petsc/petsc.git petsc

# OR to update
rm -rf arch-darwin-c-debug #remove build files
git pull
git clean -f -d -x         # remove all files that are not in the git repo

# To know what packages are available: ./config/configure.py --help
# on OS X
./configure --prefix=${HOME}/Packages --with-x=0 --download-parmetis=1 --download-metis=1 --download-mumps=1 --download-scalapack=1 --download-hypre=1 --with-mpi-dir=/opt/homebrew

--with-debugging=0 --COPTFLAGS="-O3 -march=native -mtune=native" --CXXOPTFLAGS="-O3 -march=native -mtune=native" --FOPTFLAGS="-O3 -march=native -mtune=native"

# on orion
./configure --prefix=${HOME}/Packages --with-x=0 --download-parmetis=1 --download-metis=1 --download-mumps=1 --download-scalapack=1 --download-hdf5=1 --download-netcdf=1 --with-mpi-dir=/usr/mpi/gcc/mvapich2/ --with-valgrind-dir=/share/apps --download-sowing=1 --download-zlib=1

# On stampede
./configure --prefix=${HOME}/Packages --download-superlu_dist=1 --with-x=0 --download-parmetis=1 --download-metis=1 --with-valgrind-dir=/opt/apps

# Add this for optimization (factor of 2 faster)
--with-debugging=0 --COPTFLAGS="-O3 -march=native -mtune=native" --CXXOPTFLAGS="-O3 -march=native -mtune=native" --FOPTFLAGS="-O3 -march=native -mtune=native"

# Add this for optimization (factor of 2 faster) on apple silicon
--with-debugging=0 --COPTFLAGS="-O3" --CXXOPTFLAGS="-O3" --FOPTFLAGS="-O3"

# ON Nvidia Cluster
./configure --prefix=${HOME}/Packages --with-x=0 --download-parmetis=1 --download-metis=1 --download-mumps=1 --download-scalapack=1 --download-hdf5=1 --download-netcdf=1 --download-hypre=1 --download-zlib=1 --with-debugging=0 --COPTFLAGS="-O3 -march=native -mtune=native" --CXXOPTFLAGS="-O3 -march=native -mtune=native" --FOPTFLAGS="-O3 -march=native


# READ & COPY OUTPUT TO KNOW WHAT TO DO NEXT. IT SHOULD BE SOMETHING LIKE THIS:
make PETSC_DIR=/Users/bhelenbr/Packages/petsc PETSC_ARCH=darwin10.3.1-c-debug all 
make PETSC_DIR=/Users/bhelenbr/Packages/petsc PETSC_ARCH=darwin10.3.1-c-debug install
make PETSC_DIR=/Users/bhelenbr/Packages/petsc PETSC_ARCH="" check

###################################################################
##### MeshAdapt for Tetrahedral Meshing Stuff      ################
##### https://sites.uclouvain.be/madlib/
###################################################################
#### FOR TETRAHEDRAL CODE, DO THIS HERE ####
#### NOT NECESSARY FOR 2D CODE ###
#### (FOR TETS ONLY) FOR MADLIB ####
(NEED PASSWORD FROM BRIAN)
	[svn co https://svn.cenaero.be/MAdLib/trunk MAdLib] or [svn update]
	[cd MAdLib]
	Read README
	[mkdir build; cd build]
	export CMAKE_PREFIX_PATH=/share/apps (on orion)
	export CMAKE_PREFIX_PATH=${HOME}/Packages (on OS X)
       export CMAKE_INSTALL_PREFIX=${HOME}/Packages or /share/apps

E
	[cmake ..]

	[ccmake ..] (on linux or OS X)
	Hit t to toggle expert mode.
	Change MADLIB_INSTALL_EXTENDED_API TO ON
	Change CMAKE_INSTALL_PREFIX to ${HOME}/Packages or /share/apps
	## Change BUILD DOXYGEN if you want documentation and have doxygen installed
	Also, looks for a PLATFORM variable, the files are in cmake/platforms
	Can ignore this I think
	# Put -framework accelerate everywhere to eliminate linking error with dgesv
	Hit "c" configure then Hit "g" generate

	[cmake ..]
	[make depend]
	[make -j 2]  
	[make install]

	# Move the include_all/MAdLib folder and replace the one in include


###################################################################
NOW DOWNLOAD MY CODE
###################################################################
[cd]
git clone https://github.com/bhelenbr/hp-multiphysics.git
[cd hp-multiphysics]
[mkdir include]
[mkdir lib] # (if not already there)
#################################################################

###################################################################	
#### UNIX ####
# modify your ~/.bash_profile file in your home directory by 
# adding the location of the packages directory:
# On cluster:
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/share/apps/lib
export PACKAGES=/export/apps
# For Linux:
export PACKAGES=/${HOME}/Packages
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PACKAGES/lib

After making these changes 
type
". .bash_profile"
To load the new environment variables

# you may have to monkey with the makefiles to change
# blas & lapack libraries, as well as mpic++ location 
# and directory of mpi.h include.  
# This are in the individual directories.  
# For mpi it is mainly the tri_mesh and tri_hp directories
# for boas stuff it is the tri_basis makefile and maybe
# tri_hp as well.
# Sometimes superLU changes its version number which messes everything up
# you will have to change the number to match in the tri_hp makefile

# Other things is that getnewblock.cpp in tri_hp and 
# the makefile have to compile the same classes.
# if you have virtual functions undefined, check this


make -j 2 tri_hp (For 2 processor machine)
or to do everything including 3D stuff too
make -j 2
###################################################################

###################################################################
#### OS X ####
###################################################################
cd ${HOME}/hp-multiphysics
cd utilities
xcodebuild -scheme myblas -configuration Release
xcodebuild -scheme util -configuration Release
cd ../quadtree
xcodebuild -scheme quad -configuration Release
cd ../spline++
xcodebuild -scheme spline++ -configuration Release
cd ../input_map
xcodebuild -scheme input_map -configuration Release
cd ../symbolic_function
xcodebuild -scheme install -configuration Release
cd ../tri_mesh
xcodebuild -scheme tri_mesh -configuration Release
xcodebuild -scheme libtri_mesh -configuration Release
xcodebuild -scheme libtri_mesh_mpi -configuration Release
cd ../tri_basis
xcodebuild -scheme tri_basis -configuration Release
cd ../tri_hp
xcodebuild -scheme tri_hp_petsc -configuration Release
xcodebuild -scheme tri_hp_mpi -configuration Release
xcodebuild -scheme tri_hp -configuration Release
xcodebuild -scheme tri_hp_axi_petsc -configuration Release
xcodebuild -scheme tri_hp_axi_mpi -configuration Release
xcodebuild -scheme tri_hp_axi -configuration Release
cd ../tet_mesh
xcodebuild -alltargets -configuration Release
cd ../tet_basis
xcodebuild -alltargets -configuration Release
cd ../tet_hp
xcodebuild -alltargets -configuration Release

###################################################################
# TO CLEAN
cd ${HOME}/hp-multiphysics
cd utilities
xcodebuild -scheme myblas -configuration Release clean
xcodebuild -scheme util -configuration Release clean
cd ../quadtree
xcodebuild -scheme quad -configuration Release clean
cd ../spline++
xcodebuild -scheme spline++ -configuration Release clean
cd ../input_map
xcodebuild -scheme input_map -configuration Release clean
cd ../symbolic_function
xcodebuild -scheme install -configuration Release clean
cd ../tri_mesh
xcodebuild -scheme tri_mesh -configuration Release clean
xcodebuild -scheme libtri_mesh -configuration Release clean
xcodebuild -scheme libtri_mesh_mpi -configuration Release clean
cd ../tri_basis
xcodebuild -scheme tri_basis -configuration Release clean
cd ../tri_hp
xcodebuild -scheme tri_hp_petsc -configuration Release clean
xcodebuild -scheme tri_hp_mpi -configuration Release clean
xcodebuild -scheme tri_hp -configuration Release clean
xcodebuild -scheme tri_hp_axi_petsc -configuration Release clean
xcodebuild -scheme tri_hp_axi_mpi -configuration Release clean
xcodebuild -scheme tri_hp_axi -configuration Release clean
cd ../tet_mesh
xcodebuild -alltargets -configuration Release clean
cd ../tet_basis
xcodebuild -alltargets -configuration Release clean
cd ../tet_hp
xcodebuild -alltargets -configuration Release clean
###################################################################


#################################################
# IF DESIRED, NOT NECESSARY                     #
# TO MAKE MESH & INPUT FILE GRAPHICAL UTILITIES #
# Get from Brian				#
#################################################
cd 

tar zxvf util.tgz

# For showmesh,showgrid X11 application

cd ${HOME}/Codes/Cocoa/easymesh

./compile.command

# For input.app application (OS X only) 

cd ../inputwfind

xcodebuild -configuration Deployment

###################################################################
#### FOR GMSH (NOT NECESSARY) ####
###################################################################
Download at http://www.fltk.org/software.php
move to Packages
	[tar zxvf fltk-1.1.9-source.tgz]
	[rm fltk-1.1.9-source.tgz]
	[cd fltk-1.1.9]
	[./configure --prefix=${HOME}/Packages]
	[make]
	[make install]
	[cd zlib]
	[make]
	[make install]
	[cd ../..]
FOR GMSH
	[svn checkout https://geuz.org/svn/gmsh/trunk gmsh]
For read-only access, simply use login=gmsh, password=gmsh.
	[cd gmsh]
	[svn update]

For commits (me only, login=brianh password=hb4519)
In CMAKE:
	[CMAKE_INSTALL_PREFIX ${HOME}/Packages]
	[CMAKE_PREFIX_PATH ${HOME}/Packages]
	[FLTK_DIR ${HOME}/Packages/fltk-1.3x...]
	[ENABLE_GRAPHICS]

